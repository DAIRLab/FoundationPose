"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_rgb_image(object):
    __slots__ = ["utime", "width", "height", "data"]

    def __init__(self):
        self.utime = 0
        self.width = 0
        self.height = 0
        self.data = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_rgb_image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qii", self.utime, self.width, self.height))
        for i0 in range(self.height):
            for i1 in range(self.width):
                buf.write(bytearray(self.data[i0][i1][:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_rgb_image._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_rgb_image._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_rgb_image()
        self.utime, self.width, self.height = struct.unpack(">qii", buf.read(16))
        self.data = []
        for i0 in range(self.height):
            self.data.append([])
            for i1 in range(self.width):
                self.data[i0].append(buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_rgb_image in parents: return 0
        tmphash = (0x363afc1a414d8907) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_rgb_image._packed_fingerprint is None:
            lcmt_rgb_image._packed_fingerprint = struct.pack(">Q", lcmt_rgb_image._get_hash_recursive([]))
        return lcmt_rgb_image._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

